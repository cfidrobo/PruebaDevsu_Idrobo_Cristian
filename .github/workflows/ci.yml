name: CI Pipeline

on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_REPO: ${{ github.event.repository.name }}

jobs:
  # 1) VALIDATE: asegurar que venga de main
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure branch is main
        run: |
          if [[ "${GITHUB_REF}" != "refs/heads/main" ]]; then
            echo "ðŸš« Not on main (${GITHUB_REF}). Exiting."
            exit 1
          fi
          echo "âœ… On main, proceeding."

  # 2) BUILD: instalar deps y (opcional) build
  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Build (if defined)
        run: npm run build || echo "No build step"

  # 3) TEST: correr unit tests
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install deps
        run: npm ci
      - name: Run tests
        env:
          NODE_ENV: test
        run: npm test

  # 4) VULNERABILITY SCAN: OWASP Dependency-Check
    # 4) VULNERABILITY SCAN: npm audit (versiÃ³n abreviada)
  vulnerability:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Audit dependencies and save report
        run: |
          npm ci
          npm audit --audit-level=moderate --json > audit-report.json || true

      - uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json


  # 5) SONAR ANALYSIS: SonarCloud en lugar de ESLint/coverage
  sonar-analysis:
    needs: vulnerability
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install deps (incluye sonar-scanner si lo usas como dev-dep)
        run: npm ci
      - name: Run tests with coverage
        env:
          NODE_ENV: test
        run: npm test
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=. \
            -Dsonar.tests=. \
            -Dsonar.test.inclusions="**/*.test.js" \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # 6) BUILD & PUSH: image tagged con SHA corta y 'latest'
  docker-publish:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Determine image tag
        id: tag
        run: echo "sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
      - name: Build & push
        run: |
          REPO_LOWER=$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/$REPO_LOWER
          docker build -t $IMAGE:${{ steps.tag.outputs.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ steps.tag.outputs.sha }}
          docker push $IMAGE:latest

  # ) DEPLOY K8S
  deploy-k8s:
    needs: docker-publish
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Debug shells
        run: |
          echo "Default shell = %COMSPEC%"
          where bash   || echo "bash NOT found"
          where pwsh   || echo "pwsh NOT found"
          where powershell || echo "powershell NOT found"

      - name: Deploy to local K8s
        shell: powershell
        run: |
          # Permite scripts solo para este proceso
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Selecciona tu contexto (minikube)
          kubectl config use-context minikube

          # Aplica ConfigMap y Secret
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml

          # Construye la etiqueta de imagen con los primeros 8 chars del SHA
          $sha = $Env:GITHUB_SHA.Substring(0,8)
          $owner = $Env:GITHUB_REPOSITORY_OWNER.ToLower()
          $image = "ghcr.io/$owner/pruebadevsu_idrobo_cristian:$sha"

          # Actualiza el deployment con la nueva imagen
          kubectl set image deployment/nodejs-app nodejs-app=$image --record

          # Espera al rollout
          kubectl rollout status deployment/nodejs-app --timeout=120s

          # Aplica Service y HPA
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/hpa.yaml

